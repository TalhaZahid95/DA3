##############################
#### Assingment 2 #########
## Muhammad Talha Zahid ###
#############################


## clear the environment

rm(list = ls())

## loading the relevant packages

library(tidyverse)
library(lspline)
library(cowplot)
library(boot)
library(estimatr)
library(huxtable)
library(stargazer)
library(modelsummary)
library(kableExtra)
library(dplyr)
library(data.table)
library(fixest)
library(caret)
library(skimr)
library(grid)
library(glmnet)
library(gridExtra)
library(ggpubr)
#install.packages("psych")
library(psych)

## setting the working directory

setwd("C:/Users/talha/Desktop/R_Class/R_lectures/DA3/Assingment2")

## loading the data

listings <- read.csv('https://raw.githubusercontent.com/TalhaZahid95/DA3/main/Assingment2/Buenos%20Aires.csv', header = T)

## filtering variables irrelevant for prediction models

df <- listings %>% select(
  -c("listing_url",
     "id","scrape_id","host_id","host_name","host_verifications",
     "name",
     "license",
     "description",
     "neighborhood_overview",
     "picture_url",
     "host_url",
     "host_location",
     "host_about",
     "host_thumbnail_url",
     "host_picture_url",
     "host_total_listings_count",
     "neighbourhood_group_cleansed",  # only NA values in column
     "bathrooms", # only NA values in column
     "minimum_minimum_nights", "minimum_maximum_nights", "minimum_nights_avg_ntm",
     "maximum_minimum_nights", "maximum_maximum_nights", "maximum_nights_avg_ntm", 
     "calendar_updated", # only NA values in column
     "number_of_reviews_ltm", "number_of_reviews_l30d",
     "calculated_host_listings_count_entire_homes", 
     "calculated_host_listings_count_private_rooms", 
     "calculated_host_listings_count_shared_rooms") )

###################
## data cleaning ##
##################

sapply(df, class)

## price variable

## removing $ sign

df$price <- lapply(
  df$price,
  function(x) substring( x , 2)
)

## removing commas and converting it to numeric

df$price <- as.numeric( gsub(",","", df$price))

## filtering the fields with price NA

df <- df %>% 
  filter(!is.na(price))


## room type
## filter for entire apartments

df <- df %>% 
  filter(room_type %in% 'Entire home/apt')

## drop room type variable

##df <- df %>% select( -room_type)

## property type
## filter for apartments, lofts, serviced apartments

unique(df$property_type)

df <- df %>% 
  filter(property_type %in% c('Entire home/apt','Entire serviced apartment', 'Entire loft'))

## accommodates
## keeping the apartments for 2-6 people

df <- df %>% 
  filter(accommodates %in% c(2:6))

## bathroom_text

unique(df$bathrooms)

## removing baths from it and converting to numeric

df$bathrooms <- unlist( lapply(
  df$bathrooms_text,
  function(x) as.numeric( strsplit( x, " ")[[1]][1] )
) )

# drop bathrooms_text variable

df <- df %>% select( -bathrooms_text )

## host response rate

#remove percentage signs

for (perc in c("host_response_rate","host_acceptance_rate")){
  df[[perc]]<-as.numeric(gsub("%","",as.character(df[[perc]])))
}





#amenities

df$amenities <- tolower( df$amenities )
df$amenities <- gsub("\\[","", df$amenities)
df$amenities <- gsub("\\]","", df$amenities)
df$amenities <- gsub('\\"',"",df$amenities)
df$amenities <- as.list(strsplit(df$amenities, ","))

##define levels and dummies 

levs <- levels(factor(unlist(df$amenities)))
df<-cbind(df,as.data.frame(do.call(rbind, lapply(lapply(df$amenities, factor, levs), table))))

drops <- c("amenities","translation missing: en.hosting_amenity_49",
           "translation missing: en.hosting_amenity_50")
df<-df[ , !(names(df) %in% drops)]

# create data frame of the amenities

ams <- df %>% select(-(1:43))

# delete spaces in the beginning and end of the column names, and transfer all to lower case

names(ams) <- gsub(" ","_", tolower(trimws(names(ams))))

# look at the column names we have

levs <- sort(names(ams))

# merge all the columns with the same column names

ams <- as.data.frame(do.call(cbind, by(t(ams), INDICES= names(ams),FUN=colSums)))

cat <- c( "kitchen", "stove", "oven", "microwave","frige|freezer","o_machine|ee_machine|coffee", "gril",
          "free.*on_premises", "free.*street", "paid.*on_premis|valet", "paid.*off_premises|self-parking|parking",
          "wifi|internet|Ethernet_connection", "TV|monitor", "sound_system", "bath", "pool", "hot_tub",
          "toiletries", "shampoo|conditioner", "body_soap|gel", "hair_dryer", "washer", "dryer", "iron",  
          "heating", "air_cond|fan|ac", "balcony|terrace", "garden",
          "onsite_bar|restaurant", "breakfast",  "work|office", "spa",  "fitness|gym",  
          "children|baby|crib|high|corner|chang", "smoking", "housekeeping", "fireplace", "clothing_storage",
          "years","amazon|hbo|netflix|cable", "console","sauna","fire_estinguisher|first_aid",
          "bed|pillows", "barbecue|cooking_basics|dining|dishes" , "closet|wardrobe|hangers",
          "desk" , "dresser", "shampoo|conditioner", "balcony|terrace"
)

# function to merge columns with the same key word in them

for (i in cat) {
  tdf <- ams %>% select(matches(i))
  
  ams$new_col <- ifelse(rowSums(tdf)>0, 1, 0)
  
  names(ams)[names(ams) == "new_col"] <- paste0("have_", i)
  
  ams <- ams %>% select(-colnames(tdf)) 
  
} 


df <- df %>% select((1:43))

df <- cbind(df, ams)

###########################
#### Data Preparation ####
#########################

# rename property_type categories to make them shorter

table(df$property_type)

df <- df %>% mutate( property_type = ifelse( property_type == 'Entire home/apt ', 'apartment',
                                             ifelse( property_type == 'Entire loft', 'loft',
                                                     ifelse( property_type == 'Entire serviced apartment', 'serviced_apartment', "."))))
# convert property_type to factor

df <- df %>%
  mutate(f_property_type = factor(property_type))

# convert neighborhood_cleansed to factor

df <- df %>% 
  mutate(f_neighbourhood_cleansed = factor(neighbourhood_cleansed))

# Convert host_response_time as factors

df <- df %>% 
  mutate(f_host_response_time = factor(host_response_time, levels = c( "within an hour",  "within a few hours",
                                                                       "within a day", "a few days or more")))

df$f_host_response_time <- as.factor(df$f_host_response_time)

## creating numerical variables

df <- df %>%
  mutate( p_host_response_rate = as.numeric(host_response_rate),
          p_host_acceptance_rate = as.numeric(host_acceptance_rate))

# add new numeric columns from certain columns

numericals <- c("accommodates","bathrooms", "bedrooms", "beds", "review_scores_rating","number_of_reviews",
                "reviews_per_month","minimum_nights", "availability_365")
df <- df %>%
  mutate_at(vars(numericals), funs("n"=as.numeric))

# rename columns so they start with n_ as opposed to end with _n

nnames <- df %>%
  select(ends_with("_n")) %>%
  names()
nnames_i <- match(nnames, colnames(df))
colnames(df)[nnames_i] <- paste0("n_", numericals)

#create days since last review

df <- df %>%
  mutate(
    n_days_since_last_review = as.numeric(as.Date(calendar_last_scraped,format="%d/%m/%Y") -
                                            as.Date(last_review ,format="%d/%m/%Y")))
# creating days since the host first joined

df <- df %>%
  mutate(
    n_days_since_host = as.numeric(as.Date(calendar_last_scraped,format="%d/%m/%Y") -
                                     as.Date(host_since ,format="%d/%m/%Y")))

#### DUMMY VARIABLES ####


dummies <- c(names(df)[seq(43,137)],"host_is_superhost", "host_identity_verified" )

df <- df %>%
  mutate_at(vars(dummies), funs("d"= (.)))


# rename columns

dnames <- df %>%
  select(ends_with("_d")) %>%
  names()

dnames_i <- match(dnames, colnames(df))

colnames(df)[dnames_i] <- paste0("d_", tolower(gsub("[^[:alnum:]_]", "",dummies)))

# keep columns if contain d_, n_, f_, p_, usd_ and some others

df <- df %>%
  select(matches("^d_.*|^n_.*|^f_.*|^p_.*"), price,room_type,property_type)

#### Understanding the data ####

## price

summary(df$price)
describe(df$price)

## checking the price distribution

ggplot(df) +
  geom_density(aes(price))

## filtering out the extreme values above 95 percentile

df <- df %>%
  filter(price <15340)


## checking the price distribution for log

ggplot(df) +
  geom_density(aes(price))

#### n_accommodates

describe(df$n_accommodates)

# there are no missing values

df %>%
  group_by(n_accommodates) %>%
  summarise(mean_price = mean(price), min_price= min(price), max_price = max(price), n = n())

ggplot(df, aes(n_accommodates)) +
  geom_histogram(binwidth = 0.5, fill = "cyan4", color = "white", alpha = 0.8, size = 0.25) +
  xlab("N of person accomodates") +
  theme_classic()

fig3_accommodates <- ggplot(df, aes(x=n_accommodates, y=price)) +
  geom_point(size=1, colour="cyan4", shape=16, alpha = 0.6)+
  geom_smooth(method="lm", colour="darkmagenta", se=FALSE)+
  labs(x= "Number of people accomodated",y="Price")+
  scale_x_discrete( limits = c("1", "2","3","4","5","6", "7"))+
  theme_classic()
fig3_accommodates

## the relationship between number accomodates and ln price is linear

## checking for the NAs in data

to_filter <- sapply(df, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

## n_bathrooms

ggplot(df, aes(n_bathrooms)) +
  geom_histogram(binwidth = 0.5, fill = "cyan4", color = "white", alpha = 0.8) +
  xlab("N of bathrooms") +
  theme_classic()

# Checking to see the association between n_bathrooms and price

price_bathrooms <- ggplot(df, aes(x=n_bathrooms, y=price)) +
  geom_point(size=1, colour="black", shape=16, alpha = 0.6)+
  geom_smooth(method="lm",formula = y~x, colour="magenta", se=FALSE)+
  labs(x= "Number of bathrooms",y="Price")+
  scale_x_discrete( limits = c("1", "2","3"))+
  ggthemes::theme_economist()
          
# The relationship between number of bathrooms and price seems to be linear, hence we will use linear version of the variable

## check number of bathrooms with different number of accommodates

describe(df$n_bathrooms)

df %>% 
  group_by(n_accommodates) %>% 
  summarise(num_baths = mean(n_bathrooms, na.rm = T), min_baths = min(n_bathrooms, na.rm = T), 
            max_baths = max(n_bathrooms, na.rm = T))

## there is only 1 observation with number of bathroom NA which isn't possible. There should be minimum of 1 bathroom so we impute 1 for the NA

df$n_bathrooms <- ifelse(is.na(df$n_bathrooms),1,df$n_bathrooms)

## n_bedrooms and n_beds

df %>%
  group_by(n_bedrooms) %>%
  summarise(mean_price = mean(price), min_price= min(price), max_price = max(price), 
            n = n(), median_accommodates = median(n_accommodates))

df %>%
  group_by(n_beds) %>%
  summarise(mean_price = mean(price), min_price= min(price), max_price = max(price), 
            n = n(), median_accommodates = median(n_accommodates))

# check number of bedrooms for different number of accommodates

describe(df$n_bedrooms)

df %>% 
  group_by(n_accommodates) %>% 
  summarise(num_bedrooms = mean(n_bedrooms, na.rm = T), 
            min_bedrooms = min(n_bedrooms, na.rm = T), max_bedrooms = max(n_beds, na.rm = T))

price_bedrooms <- ggplot(df, aes(x=n_bedrooms, y=price)) +
  geom_point(size=1, colour="black", shape=16, alpha = 0.6)+
  geom_smooth(method="lm",formula = y~x, colour="magenta", se=FALSE)+
  labs(x= "Number of people accomodated",y="Price")+
  scale_x_discrete( limits = c("1", "2","3"))+
  ggthemes::theme_economist()

##  there are 157 observations with NA in bedrooms, we will be taking number of accomodates and divide it by 2 (assuming 1 bedroom accomodates 2 people)
## there are 24 observations with NA in beds, we will be taking number of accomodates and divide it by 2 (assuming 1 bed accomodates 2 people)

df <- df %>%
  mutate(
    n_beds = ifelse(is.na(n_beds), round(n_accommodates / 2), n_beds), 
    n_bedrooms = ifelse(is.na(n_bedrooms), round(n_accommodates / 2), n_bedrooms),) 

## checking for the NAs in data

to_filter <- sapply(df, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

## creating the flag variables

df <- df %>%
  mutate(
    flag_review_scores_rating = ifelse(is.na(n_review_scores_rating),1, 0),
    n_review_scores_rating =  ifelse(is.na(n_review_scores_rating), median(n_review_scores_rating, na.rm = T), n_review_scores_rating),
    
    flag_host_acceptance_rate = ifelse(is.na(p_host_acceptance_rate),1, 0),
    p_host_acceptance_rate =  ifelse(is.na(p_host_acceptance_rate), median(p_host_acceptance_rate, na.rm = T), p_host_acceptance_rate),
    
    flag_host_response_rate = ifelse(is.na(p_host_response_rate),1, 0),
    p_host_response_rate =  ifelse(is.na(p_host_response_rate), median(p_host_response_rate, na.rm = T), p_host_response_rate),
    
    flag_host_response_time = ifelse(is.na(f_host_response_time),1, 0),
    f_host_response_time =  ifelse(is.na(f_host_response_time), "missing", f_host_response_time),
    
    
    flag_days_since_last_review = ifelse(is.na(n_days_since_last_review),1, 0),
    n_days_since_last_review =  ifelse(is.na(n_days_since_last_review), median(n_days_since_last_review, na.rm = T), n_days_since_last_review),
    
    flag_reviews_per_month = ifelse(is.na(n_reviews_per_month),1, 0),
    n_reviews_per_month =  ifelse(is.na(n_reviews_per_month), median(n_reviews_per_month, na.rm = T), n_reviews_per_month)
  )

# The above created flag variables have values close to zero, which may suggest that the missing values are at random. After creating the flag variables, we have replaced the missing values with median for numeric columns and with missing for non-numeric

## n_number_of_reviews

describe(df$n_number_of_reviews)

ggplot(df, aes(n_number_of_reviews)) +
  geom_histogram(binwidth = 5, fill = "black", alpha = 0.8, size = 0.25) +
  ylab("") +
  xlab("N of reviews")

## the graph is right skewed so we take ln for it 

df <- df %>%
  mutate(n_ln_number_of_reviews = log(n_number_of_reviews))

## dropping the extra column

df$n_days_since_host <- NULL

## convert to factors

df <- df %>%
  mutate(d_host_is_superhost = factor(d_host_is_superhost))
df <- df %>%
  mutate(d_host_identity_verified = factor(d_host_identity_verified))

### prediction ####
###################

source("theme_bg.R")
source("da_helper_functions.R")

df$flag_reviews_per_month

#####################
# Setting up models #
#####################

df$n_days_since_last_review

# Basic Variables

basic_lev  <- c("f_property_type","f_neighbourhood_cleansed","n_accommodates","n_bathrooms",
                "n_bedrooms","n_beds","n_availability_365",
                "price")

reviews <- c("n_review_scores_rating","n_reviews_per_month","flag_review_scores_rating",
             "flag_days_since_last_review","flag_reviews_per_month",
             "n_days_since_last_review","n_ln_number_of_reviews")

host <- c("p_host_response_rate","p_host_acceptance_rate",
          "d_host_greets_you","d_host_is_superhost",
          "d_host_identity_verified","flag_host_acceptance_rate",
          "flag_host_response_rate","f_host_response_time",
          "flag_host_response_time")

ammenities <- c("d_have_bath","d_building_staff", "f_neighbourhood_cleansed",
                "d_carbon_monoxide_alarm","d_cleaning_products",
                "d_have_barbecuecooking_basicsdiningdishes","d_and_table",
                "d_have_dryer","d_elevator","d_essentials",
                "d_have_bedpillows",
                "d_have_fire_estinguisherfirst_aid","d_have_closetwardrobehangers","d_hot_water",
                "d_hot_water_kettle","d_laundromat_nearby","d_have_microwave",
                "d_outdoor_furniture",
                "d_private_entrance","d_roomdarkening_shades",
                "d_safe","d_security_cameras_on_property",
                "d_have_pool","d_smoke_alarm","d_toaster",
                "d_wine_glasses","d_have_kitchen","d_have_stove",
                "d_have_oven","d_have_frigefreezer",
                "d_have_wifiinternetethernet_connection","d_have_tvmonitor",
                "d_have_iron","d_have_heating","d_have_air_condfanac",
                "d_have_balconyterrace","d_have_garden","d_have_breakfast",
                "d_have_workoffice",
                "d_luggage_dropoff_allowed","d_single_level_home",
                "d_have_console", "d_have_sauna", "d_have_amazonhbonetflixcable")


# Checking interactions

price_diff_by_variables4 <- function(df, factor_var, dummy_var, factor_lab, dummy_lab){ 
  factor_var <- as.name(factor_var)
  dummy_var <- as.name(dummy_var)
  
  stats <- df %>%
    group_by(!!factor_var, !!dummy_var) %>%
    dplyr::summarize(Mean = mean(price, na.rm=TRUE),
                     se = sd(price)/sqrt(n()))
  
  stats[,2] <- lapply(stats[,2], factor)
  
  ggplot(stats, aes_string(colnames(stats)[1], colnames(stats)[3], fill = colnames(stats)[2]))+
    geom_bar(stat='identity', position = position_dodge(width=0.9), alpha=0.8)+
    geom_errorbar(aes(ymin=Mean-(1.96*se),ymax=Mean+(1.96*se)),
                  position=position_dodge(width = 0.9), width = 0.25)+
    scale_color_manual(name=dummy_lab,
                       values=c(color[2],color[1],color[3],color[4])) +
    scale_fill_manual(name=dummy_lab,
                      values=c(color[2],color[1],color[3],color[4])) +
    ylab('Mean Price')+
    xlab(factor_lab) +
    theme_bg()+
    theme(panel.grid.major=element_blank(),
          panel.grid.minor=element_blank(),
          panel.border=element_blank(),
          axis.line=element_line(),
          legend.position = "top",
          #legend.position = c(0.7, 0.9),
          legend.box = "vertical",
          legend.text = element_text(size = 5),
          legend.title = element_text(size = 5, face = "bold"),
          legend.key.size = unit(x = 0.4, units = "cm")
    )
}


# Plot interactions between room type/property type and all dummies 

##sapply(ammenities, function(x){
  ##p <- price_diff_by_variables4(df, "f_property_type", x, "property_type", x)
  ##print(p)
##})

interactions <- c("f_property_type*d_have_bath","f_property_type*f_neighbourhood_cleansed",
                  "f_property_type*d_have_bedpillows",
                  "f_property_type*d_have_closetwardrobehangers","f_property_type*d_hot_water_kettle",
                  "f_property_type*d_private_entrance",
                  "f_property_type*d_roomdarkening_shades","f_property_type*d_safe",
                  "f_property_type*d_security_cameras_on_property","f_property_type*d_have_pool",
                  "f_property_type*d_toaster","f_property_type*d_have_kitchen",
                  "f_property_type*d_have_frigefreezer",
                  "f_property_type*d_have_wifiinternetethernet_connection","f_property_type*d_have_amazonhbonetflixcable",
                  "f_property_type*d_have_tvmonitor","f_property_type*d_have_iron","f_property_type*d_have_heating",
                  "f_property_type*d_have_balconyterrace")

## Some graphs for interactions used

p1 <- price_diff_by_variables2(df, "f_property_type", "d_have_bath","Property Type", "Have bath") 
p2 <- price_diff_by_variables2(df, "f_property_type", "d_have_bedpillows","Property Type", "Have bed pillows")
p3 <- price_diff_by_variables2(df, "f_property_type", "d_private_entrance","Property Type", "Private enterance")
p4 <- price_diff_by_variables2(df, "f_property_type", "d_security_cameras_on_property","Property Type", "Security Cameras on Property") 
# <------------
p5 <- price_diff_by_variables2(df, "f_property_type", "d_have_tvmonitor","Property Type", "Have Tv Monitor")

p6 <- price_diff_by_variables2(df, "f_property_type", "d_have_frigefreezer","Property Type", "Have Fridge/Freezer")

g_interactions <- plot_grid(p1, p2, p3,
                            p4, p5, p6, nrow=3, ncol=2)

#################################
# Create test and train samples #
#################################

# now all stuff runs on training vs test (holdout), alternative: 4-fold CV
# create test and train samples (80% of observations in train sample)


smp_size <- floor(0.8 * nrow(df))
## K = 5
k_folds <- 5
# Define seed value
seed_val <- 111
train_ids <- sample(seq_len(nrow(df)), size = smp_size)
df$train <- 0
df$train[train_ids] <- 1
# Create train and test sample variables
data_train <- df %>% filter(train == 1)
data_test <- df %>% filter(train == 0)

#####################

#Bulding the most complex model to use in LASSO

model4 <- paste0(" ~ ",paste(c(basic_lev, reviews, host, ammenities, interactions),collapse = " + "))

# Creating the most complex OLS model to run a LASSO. Here LASSO is being used as a tool to choose predictors
# Set lasso tuning parameters:
# a) basic setup
train_control <- trainControl( method = "cv", number = k_folds)
# b) tell the actual lambda (penalty parameter) to use for lasso
tune_grid     <- expand.grid("alpha" = c(1), "lambda" = seq(0.05, 1, by = 0.05))
# c) create a formula
formula <- formula(paste0("price ", paste(setdiff(model4, "price"), collapse = " + ")))

# Run LASSO
set.seed(seed_val)
lasso_model <- caret::train(formula,
                            data = data_train,
                            method = "glmnet",
                            preProcess = c("center", "scale"),
                            trControl = train_control,
                            tuneGrid = tune_grid,
                            na.action=na.exclude)
# Check the output 
lasso_model
# Penalty parameters
lasso_model$bestTune
# Check th optimal lambda parameter
lasso_model$bestTune$lambda
# Check the RMSE curve
plot(lasso_model)
# One can get the coefficients as well
lasso_coeffs <- coef(lasso_model$finalModel, lasso_model$bestTune$lambda) %>%
  as.matrix() %>%
  as.data.frame() %>%
  rownames_to_column(var = "variable") %>%
  rename(coefficient = `s1`)  # the column has a name "1", to be renamed
print(lasso_coeffs)
# Check the number of variables which actually has coefficients other than 0
lasso_coeffs_nz<-lasso_coeffs %>%
  filter(coefficient!=0)
print(nrow(lasso_coeffs_nz))

write_csv(lasso_coeffs_nz,"Assingment2/NonZeroCoefficients.csv")

# Get the RMSE of the Lasso model 
#   Note you should compare this to the test RMSE
lasso_fitstats <- lasso_model$results %>%
  filter(lambda == lasso_model$bestTune$lambda) 
lasso_fitstats
# Create an auxilary tibble
lasso_add <- tibble(Model='LASSO', Coefficients=nrow(lasso_coeffs_nz),
                    R_squared=lasso_fitstats$Rsquared, BIC = NA, 
                    Training_RMSE = NA, Test_RMSE = lasso_fitstats$RMSE )

# modifying the list of variables to be used based on LASSO results

single_lev <- "n_accommodates"

basic_lev  <- c("f_property_type","f_neighbourhood_cleansed","n_accommodates","n_bathrooms",
                "n_bedrooms","n_beds","n_availability_365",
                "price")

reviews <- c("n_review_scores_rating","n_reviews_per_month","flag_review_scores_rating",
             "flag_days_since_last_review","flag_reviews_per_month",
             "n_days_since_last_review")


host <- c("f_host_response_time",
          "flag_host_response_time",
          "p_host_acceptance_rate",
          "d_host_greets_you",
          "d_host_is_superhost",
          "d_host_identity_verified",
          "flag_host_acceptance_rate",
          "flag_host_response_rate",
          "p_host_response_rate")




ammenities <- c("d_have_bath","d_building_staff", "f_neighbourhood_cleansed",
                "d_carbon_monoxide_alarm","d_cleaning_products",
                "d_have_barbecuecooking_basicsdiningdishes",
                "d_have_dryer","d_elevator","d_essentials",
                "d_have_bedpillows",
                "d_have_fire_estinguisherfirst_aid","d_have_closetwardrobehangers","d_hot_water",
                "d_hot_water_kettle","d_laundromat_nearby","d_have_microwave",
                "d_outdoor_furniture",
                "d_private_entrance","d_roomdarkening_shades",
                "d_safe",
                "d_have_pool","d_smoke_alarm","d_toaster",
                "d_wine_glasses","d_have_stove",
                "d_have_oven",
                "d_have_wifiinternetethernet_connection",
                "d_have_iron","d_have_air_condfanac",
                "d_have_balconyterrace","d_have_breakfast",
                "d_have_workoffice",
                "d_luggage_dropoff_allowed","d_single_level_home",
                "d_have_sauna")

interactions <- c("f_property_type*d_have_bath","f_property_type*f_neighbourhood_cleansed",
                  "f_property_type*d_have_bedpillows",
                  "f_property_type*d_have_closetwardrobehangers","f_property_type*d_hot_water_kettle",
                  "f_property_type*d_private_entrance",
                  "f_property_type*d_roomdarkening_shades","f_property_type*d_safe",
                  "f_property_type*d_security_cameras_on_property","f_property_type*d_have_pool",
                  "f_property_type*d_toaster","f_property_type*d_have_kitchen",
                  "f_property_type*d_have_frigefreezer",
                  "f_property_type*d_have_wifiinternetethernet_connection","f_property_type*d_have_amazonhbonetflixcable",
                  "f_property_type*d_have_tvmonitor","f_property_type*d_have_iron","f_property_type*d_have_heating",
                  "f_property_type*d_have_balconyterrace")

# Building OLS models

model1 <- paste0("~", paste(single_lev,collapse = "+"))
model2 <- paste0(" ~ ",paste(basic_lev,collapse = " + "))
model3 <- paste0(" ~ ",paste(c(basic_lev, reviews, host, ammenities),collapse = " + "))


# Do the iteration

library(fixest)
for ( i in 1:4 ){
  print(paste0( "Estimating model: " ,i ))
  # Get the model name
  model_name <-  paste0("model",i)
  model_pretty_name <- paste0("M",i,"")
  # Specify the formula
  yvar <- "price"
  xvars <- eval(parse(text = model_name))
  formula <- formula(paste0(yvar,xvars))
  
  # Estimate model on the whole sample
  model_work_data <- feols( formula , data = data_train , vcov='hetero' )
  #  and get the summary statistics
  fs  <- fitstat(model_work_data,c('rmse','r2','bic'))
  BIC <- fs$bic
  r2  <- fs$r2
  rmse_train <- fs$rmse
  ncoeff <- length( model_work_data$coefficients )
  
  # Do the k-fold estimation
  set.seed(seed_val)
  cv_i <- train( formula, data_train, method = "lm", 
                 trControl = trainControl(method = "cv", number = k_folds))
  rmse_test <- mean( cv_i$resample$RMSE )
  
  # Save the results
  model_add <- tibble(Model=model_pretty_name, Coefficients=ncoeff,
                      R_squared=r2, BIC = BIC, 
                      Training_RMSE = rmse_train, Test_RMSE = rmse_test )
  if ( i == 1 ){
    model_results <- model_add
  } else{
    model_results <- rbind( model_results , model_add )
  }
}

# Check summary table
# Add it to final results

model_results <- rbind( model_results , lasso_add )
model_results

predictors_model1 <- single_lev
set.seed(111)
system.time({
  ols_model <- train(
    formula(paste0("price ~", paste0(predictors_model1, collapse = " + "))),
    data = data_train,
    method = "lm",
    trControl = train_control
  )
})
ols_model_coeffs <-  ols_model$finalModel$coefficients
ols_model_coeffs_df <- data.frame(
  "variable" = names(ols_model_coeffs),
  "ols_coefficient" = ols_model_coeffs
) %>%
  mutate(variable = gsub("`","",variable))

########################
# Random Forest#
#######################

predictors <- c(basic_lev, host, reviews, ammenities,interactions)
# set tuning 
tune_grid <- expand.grid(
  .mtry = c(6, 8, 10),
  .splitrule = "variance",
  .min.node.size = c(5, 10, 15)
)
set.seed(111)
system.time({
  rf_model <- train(
    formula(paste0("price ~", paste0(predictors, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = train_control,
    tuneGrid = tune_grid,
    importance = "impurity",
    .num.trees=500
  )
})

rf_model

rf_tuning_model_table <- rf_model$results %>%
  dplyr::select(mtry, min.node.size, RMSE) %>%
  dplyr::rename(nodes = min.node.size) %>%
  spread(key = mtry, value = RMSE)



##auto tuning random forest

set.seed(111)
system.time({
  rf_model_auto <- train(
    formula(paste0("price ~", paste0(predictors, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = train_control,
    importance = "impurity",
    .num.trees=500
  )
})
rf_model_auto

##Variable Importance Plots rf_model

rf_model_var_imp <- ranger::importance(rf_model$finalModel)/1000
rf_model_var_imp_df <-
  data.frame(varname = names(rf_model_var_imp),imp = rf_model_var_imp) %>%
  mutate(varname = gsub("f_neighbourhood_cleansed", "Borough:", varname) ) %>%
  mutate(varname = gsub("f_room_type", "Room type:", varname) ) %>%
  arrange(desc(imp)) %>%
  mutate(imp_percentage = imp/sum(imp))
rf_model_var_imp_df

# to have a quick look
plot(varImp(rf_model))

# have a version with top 10 vars only

ggplot(rf_model_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color='red', size=1) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color='red', size=0.75) +
  ylab("Importance (Percent)") +
  xlab("Variable Name") +
  coord_flip() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bw()

##############################
# 2) varimp plot grouped
##############################
# grouped variable importance - keep binaries created off factors together

varnames <- rf_model$finalModel$xNames

f_neighbourhood_cleansed <- grep("f_neighbourhood_cleansed",varnames, value = TRUE)

f_host_varnames <- grep("d_host",varnames, value = TRUE)

f_property_type_varnames <- grep("f_property_type",varnames, value = TRUE)

f_reviews_varnames <- grep("review",varnames, value = TRUE)

amenities_varnames <- c("d_have_bath","d_building_staff", "f_neighbourhood_cleansed",
                        "d_carbon_monoxide_alarm","d_cleaning_products",
                        "d_have_barbecuecooking_basicsdiningdishes",
                        "d_have_dryer","d_elevator","d_essentials",
                        "d_have_bedpillows",
                        "d_have_fire_estinguisherfirst_aid","d_have_closetwardrobehangers","d_hot_water",
                        "d_hot_water_kettle","d_laundromat_nearby","d_have_microwave",
                        "d_outdoor_furniture",
                        "d_private_entrance","d_roomdarkening_shades",
                        "d_safe",
                        "d_have_pool","d_smoke_alarm","d_toaster",
                        "d_wine_glasses","d_have_stove",
                        "d_have_oven",
                        "d_have_wifiinternetethernet_connection",
                        "d_have_iron","d_have_air_condfanac",
                        "d_have_balconyterrace","d_have_breakfast",
                        "d_have_workoffice",
                        "d_luggage_dropoff_allowed","d_single_level_home",
                        "d_have_sauna")

groups <- list(Neighbourhood = f_neighbourhood_cleansed,
               Host_Related=f_host_varnames,
               Property_Type = f_property_type_varnames,
               Reviews = f_reviews_varnames,
               Amenities = amenities_varnames,
               Bathrooms = "n_bathrooms",
               Minimum_Nights = "n_ln_minimum_nights",
               Number_Accommodates = "n_accommodates",
               Beds = "n_beds")

# Need a function to calculate grouped varimp

group.importance <- function(rf.obj, groups) {
  var.imp <- as.matrix(sapply(groups, function(g) {
    sum(ranger::importance(rf.obj)[g], na.rm = TRUE)
  }))
  colnames(var.imp) <- "MeanDecreaseGini"
  return(var.imp)
}

rf_model_var_imp_grouped <- group.importance(rf_model$finalModel, groups)
rf_model_var_imp_grouped_df <- data.frame(varname = rownames(rf_model_var_imp_grouped),
                                          imp = rf_model_var_imp_grouped[,1])  %>%
  mutate(imp_percentage = imp/sum(imp))
ggplot(rf_model_var_imp_grouped_df, aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color='red', size=1) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color='red', size=0.7) +
  ylab("Importance (Percent)") +   xlab("Variable Name") +
  coord_flip() +
  # expand=c(0,0),
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bw()

##Variable Importance Plots rf_model_auto

rf_model_auto_var_imp <- ranger::importance(rf_model_auto$finalModel)/1000
rf_model_auto_var_imp_df <-
  data.frame(varname = names(rf_model_auto_var_imp),imp = rf_model_auto_var_imp) %>%
  mutate(varname = gsub("f_neighbourhood_cleansed", "Neighbourhood", varname) ) %>%
  mutate(varname = gsub("f_room_type", "Room Type:", varname) ) %>%
  arrange(desc(imp)) %>%
  mutate(imp_percentage = imp/sum(imp))
rf_model_auto_var_imp_df

# to have a quick look

plot(varImp(rf_model_auto))

# have a version with top 10 vars only

ggplot(rf_model_auto_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color='red', size=1) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color='red', size=0.75) +
  ylab("Importance (Percent)") +
  xlab("Variable Name") +
  coord_flip() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bw()

##############################
# 2) varimp plot grouped
##############################

# grouped variable importance - keep binaries created off factors together

varnames_auto <- rf_model_auto$finalModel$xNames

f_neighbourhood_auto <- grep("f_neighbourhood_cleansed",varnames, value = TRUE)
f_host_varnames_auto <- grep("d_host",varnames_auto, value = TRUE)
f_property_type_varnames_auto <- grep("f_property_type",varnames_auto, value = TRUE)
f_reviews_varnames_auto <- grep("review",varnames_auto, value = TRUE)
amenities_varnames_auto <- c("d_have_bath","d_building_staff", "f_neighbourhood_cleansed",
                             "d_carbon_monoxide_alarm","d_cleaning_products",
                             "d_have_barbecuecooking_basicsdiningdishes",
                             "d_have_dryer","d_elevator","d_essentials",
                             "d_have_bedpillows",
                             "d_have_fire_estinguisherfirst_aid","d_have_closetwardrobehangers","d_hot_water",
                             "d_hot_water_kettle","d_laundromat_nearby","d_have_microwave",
                             "d_outdoor_furniture",
                             "d_private_entrance","d_roomdarkening_shades",
                             "d_safe",
                             "d_have_pool","d_smoke_alarm","d_toaster",
                             "d_wine_glasses","d_have_stove",
                             "d_have_oven",
                             "d_have_wifiinternetethernet_connection",
                             "d_have_iron","d_have_air_condfanac",
                             "d_have_balconyterrace","d_have_breakfast",
                             "d_have_workoffice",
                             "d_luggage_dropoff_allowed","d_single_level_home",
                             "d_have_sauna")

groups_auto <- list(Neighbourhood = f_neighbourhood_auto,
                    Host_Related=f_host_varnames_auto,
                    Property_Type = f_property_type_varnames_auto,
                    Reviews = f_reviews_varnames_auto,
                    Amenities = amenities_varnames_auto,
                    Bathrooms = "n_bathrooms",
                    Minimum_Nights = "n_ln_minimum_nights",
                    Number_Accommodates = "n_accommodates",
                    Beds = "n_beds")

# Need a function to calculate grouped varimp

group.importance <- function(rf.obj, groups_auto) {
  var.imp <- as.matrix(sapply(groups, function(g) {
    sum(ranger::importance(rf.obj)[g], na.rm = TRUE)
  }))
  colnames(var.imp) <- "MeanDecreaseGini"
  return(var.imp)
}
rf_model_auto_var_imp_grouped <- group.importance(rf_model_auto$finalModel, groups)
rf_model_auto_var_imp_grouped_df <- data.frame(varname = rownames(rf_model_auto_var_imp_grouped),
                                               imp = rf_model_auto_var_imp_grouped[,1])  %>%
  mutate(imp_percentage = imp/sum(imp))
ggplot(rf_model_auto_var_imp_grouped_df, aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color='red', size=1) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color='red', size=0.7) +
  ylab("Importance (Percent)") +   xlab("Variable Name") +
  coord_flip() +
  # expand=c(0,0),
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bw()

# evaluate random forests 

results <- resamples(
  list(
    model_1  = rf_model,
    model_auto  = rf_model_auto
  )
)
summary(results)

# CART with pruning

# CART with built-in pruning

set.seed(4321)
system.time({
  cart_model <- train(
    formula(paste0("price ~", paste0(predictors, collapse = " + "))),
    data = data_train,
    method = "rpart",
    tuneLength = 10,
    trControl = train_control
  )
})
cart_model
library(rpart)
#install.packages("rpart.plot")
library(rpart.plot)
# Tree graph
rpart.plot(cart_model$finalModel, tweak=1.2, digits=-1, extra=1)

##GBM
gbm_grid <-  expand.grid(interaction.depth = 5, # complexity of the tree
                         n.trees = 250, # number of iterations, i.e. trees
                         shrinkage = 0.1, # learning rate: how quickly the algorithm adapts
                         n.minobsinnode = 20 # the minimum number of training set samples in a node to commence splitting
)
set.seed(111)
system.time({
  gbm_model <- train(formula(paste0("price ~", paste0(predictors, collapse = " + "))),
                     data = data_train,
                     method = "gbm",
                     trControl = train_control,
                     verbose = FALSE,
                     tuneGrid = gbm_grid)
})
gbm_model
gbm_model$finalModel

# get prediction rmse and add to next summary table
# ---- compare these models

final_models <-
  list("OLS" = ols_model,
       "CART" = cart_model,
       "Random forest 1: with tuning provided" = rf_model,
       "Random forest 2: auto tuning" = rf_model_auto,
       "GBM"  = gbm_model)
results <- resamples(final_models) %>% summary()
results

# Model selection is carried out on this CV RMSE

result <- imap(final_models, ~{
  mean(results$values[[paste0(.y,"~RMSE")]])
}) %>% unlist() %>% as.data.frame() %>%
  rename("CV RMSE" = ".")
result

# evaluate preferred model on the holdout set

result_2 <- map(final_models, ~{
  RMSE(predict(.x, newdata = data_test), data_test[["price"]])
}) %>% unlist() %>% as.data.frame() %>%
  rename("Holdout RMSE" = ".")

result_2

########################################################################################
# Partial Dependence Plots for the best model; random forest with specified tuning parameters
#########################################################################################

# 1) Property Type

#install.packages("pdp")
library(pdp)

pdp_f_property_type <- pdp::partial(rf_model, pred.var = "f_property_type", 
                                    pred.grid = distinct_(data_test, "f_property_type"), 
                                    train = data_train)
fig1 <- pdp_f_property_type %>%
  autoplot( ) +
  geom_point(color='red', size=2) +
  geom_line(color='red', size=1) +
  ylab("Predicted price") +
  xlab("Property Type") +
  theme_bw()

# 2) Number of accommodates

pdp_n_accommodates <- pdp::partial(rf_model, pred.var = "n_accommodates", 
                                   pred.grid = distinct_(data_test, "n_accommodates"), 
                                   train = data_train)
fig2 <- pdp_n_accommodates %>%
  autoplot( ) +
  geom_point(color='red', size=4) +
  ylab("Predicted price") +
  xlab("Accommodates (persons)") +
  #scale_y_continuous(limits=c(60,120), breaks=seq(60,120, by=10)) +
  theme_bw()
